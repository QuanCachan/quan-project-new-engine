/**
 *     This file is part of the Squashtest platform.
 *     Copyright (C) 2018 - 2018 HENIX
 *
 *     See the NOTICE file distributed with this work for additional
 *     information regarding copyright ownership.
 *
 *     This is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Lesser General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     this software is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public License
 *     along with this software.  If not, see <http://www.gnu.org/licenses />.
 */
package fr.henix.squash.backbone.engine.wrapper;

import fr.henix.squash.backbone.exception.NotUniqueEntryException;
import fr.henix.squash.framework.test.instructions.ResourceName;

/**
 * This class defines the local context for a group of instruction (ex: engine
 * instructions generated by a DSL line) See also null {@link org.squashtest.ta.framework.test.instructions.ResourceName},
 * {@link org.squashtest.ta.framework.test.instructions.ResourceName.Scope} and
 * the
 * {@link org.squashtest.ta.framework.test.instructions.ResetLocalContextInstruction}
 * instruction classes.
 *
 * @author qtran
 */
public interface LocalContext {

    /**
     * Numeric identifier for the context. Such an identifier is unique in the
     * test.
     *
     * @return
     */
    int getContextIdentifier();

    /**
     * Add a resource to the context.
     *
     * @param wrapper the (wrapped) resource to add.
     * @throws NotUniqueEntryException if a resource is added when another
     * resource with the same name already exists in this context.
     */
    void addResource(ResourceWrapper wrapper) throws NotUniqueEntryException;

    /**
     * Try to get a resource by name.
     *
     * @param name the name of the resource to look up.
     * @return the (wrapped) resource if found, <code>null</code> if not.
     */
    ResourceWrapper getResource(ResourceName name);

    /**
     * Call {@link ResourceWrapper#cleanUp()} on all resources of this context
     * and free resources.
     */
    void cleanUp();
}
